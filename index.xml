<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Moyrne&#39;Blog</title>
    <link>https://blog.moyrn.com/</link>
    <description>Recent content on Moyrne&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 23 May 2021 14:25:33 +0800</lastBuildDate><atom:link href="https://blog.moyrn.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>False Sharing</title>
      <link>https://blog.moyrn.com/posts/20210523_false_sharing/</link>
      <pubDate>Sun, 23 May 2021 14:25:33 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210523_false_sharing/</guid>
      <description>CPU-Cache 结构图  多数的CPU缓冲结构(Intel)  缓存行大小 32/64/128(现在多数为64)  解释（下面假设所有的线程都在不同的核心上）  在 不同的线程上读写某段连续的内存不同索引的值, 可能导致高速缓冲miss, 导致重复拷贝   a = [1,1,1,1,1,1]# thread 1for {a[0]++}# thread 2for {a[1]++}# thread 3for {a[2]++}# thread 3for {a[4]++}  线程写入某个值之后, 会导致其他其他的线程的缓存失效
例如 thread 1 修改了a[0]
其它线程虽然没有使用a[0], 但缓存也会失效, 需要重新获取, 会产生额外的拷贝的开销
如果需要解决这个问题, 需要将各个元素分隔到不同的缓存行, 也就是上一个元素的开始地址到下一个元素的开始地址, 间隔32/64/128
  代码 package false_sharing import ( &amp;#34;runtime&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;unsafe&amp;#34; ) const numCpu = 12 type increase interface { Increase(idx int) Len() int } func BenchmarkNoPadIncrease(b *testing.</description>
    </item>
    
    <item>
      <title>zsh,oh-my-zsh安装</title>
      <link>https://blog.moyrn.com/posts/20210423_ubuntu_zsh/</link>
      <pubDate>Sat, 24 Apr 2021 16:18:28 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210423_ubuntu_zsh/</guid>
      <description># 安装zsh sudo apt-get install zsh # 将zsh切换成默认shell chsh -s /bin/zsh # 安装 oh-my-zsh sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; # Add powerlevel10k to the list of Oh My Zsh themes. git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k # Replace ZSH_THEME=&amp;#34;powerlevel9k/powerlevel9k&amp;#34; with ZSH_THEME=&amp;#34;powerlevel10k/powerlevel10k&amp;#34;. sed -i.bak &amp;#39;s/powerlevel9k/powerlevel10k/g&amp;#39; ~/.zshrc # 安装插件 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting vim ~/.zshrc # 修改文件内容 plugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting) # 保存,执行文件 source ~/.zshrc </description>
    </item>
    
    <item>
      <title>Go特性记录</title>
      <link>https://blog.moyrn.com/posts/20210316_go_features/</link>
      <pubDate>Tue, 16 Mar 2021 11:51:54 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210316_go_features/</guid>
      <description>internal 包 [20210316] /go/src/xxx/package/internal  internal 包中的内容，无法在package外被导入，否则编译不通过。  </description>
    </item>
    
    <item>
      <title>Deployment 水平扩容和滚动更新</title>
      <link>https://blog.moyrn.com/posts/20210213_rollout_uptodate/</link>
      <pubDate>Sat, 13 Feb 2021 22:38:54 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210213_rollout_uptodate/</guid>
      <description>概念   Deployment 所管理的 Pod 的 ownerReference 就是 ReplicaSet
  Deployment 会拥有多个ReplicaSet, 不同的 ReplicaSet 代表不同的版本
  关系图   Deployment 状态字段
 DESIRED：用户期望的 Pod 副本个数（spec.replicas 的值）； CURRENT：当前处于 Running 状态的 Pod 的个数； UP-TO-DATE：当前处于最新版本的 Pod 的个数，所谓最新版本指的是 Pod 的 Spec 部分与 Deployment 里 Pod 模板里定义的完全一致； AVAILABLE：当前已经可用的 Pod 的个数，即：既是 Running 状态，又是最新版本，并且已经处于 Ready（健康检查正确）状态的 Pod 的个数。    ReplicaSet 状态字段 DESIRED、CURRENT 和 READY，与 Deployment 一致，Deployment 仅多出 UP-TO-DATE 状态
  滚动更新 RollingUpdateStrategy 在“滚动更新”的过程中永远都会确保至少有 2 个 Pod 处于可用状态，至多只有 4 个 Pod 同时存在于集群中 旧版本RS的Pod数量递减，新版本RS的Pod数量递增</description>
    </item>
    
    <item>
      <title>Pod 对象</title>
      <link>https://blog.moyrn.com/posts/20210212_pod_project/</link>
      <pubDate>Fri, 12 Feb 2021 15:07:14 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210212_pod_project/</guid>
      <description>Volume  Projected Volume 将预先设置好的数据投射到容器中，  Secret    volumes:- name:mysql-cred projected:sources:- secret:name:user - secret:name:pass- ConfigMap - DownwardAPI - ServiceAccountToken restartPolicy livenessProbe   只要 Pod 的 restartPolicy 指定的策略允许重启异常的容器（比如：Always），那么这个 Pod 就会保持 Running 状态，并进行容器重启。否则，Pod 就会进入 Failed 状态 。
  对于包含多个容器的 Pod，只有它里面所有的容器都进入异常状态后，Pod 才会进入 Failed 状态。在此之前，Pod 都是 Running 状态。此时，Pod 的 READY 字段会显示正常容器的个数，比如：
$ kubectl get pod test-liveness-exec NAME READY STATUS RESTARTS AGE liveness-exec 0/1 Running 1 1m   livenessProbe HTTP Or TCP, 多用于Web服务健康检查, Web服务中暴露出健康检查URL</description>
    </item>
    
    <item>
      <title>Kubeadm 搭建K8s集群</title>
      <link>https://blog.moyrn.com/posts/20210207_kubeadm_start/</link>
      <pubDate>Sun, 07 Feb 2021 13:56:54 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210207_kubeadm_start/</guid>
      <description>前置操作 (每台机器上都需要操作)  使用系统 Centos 7  cat /etc/redhat-release CentOS Linux release 7.9.2009 (Core)  关闭防火墙  systemctl stop firewalld &amp;amp;&amp;amp; systemctl disable firewalld  禁用SELINUX  vim /etc/selinux/config # 或者修改/etc/sysconfig/selinux SELINUX=disabled  [注意] 开启 IP 路由转发和 NAT  # https://ccie.lol/knowledge-base/linux-centos-route-forwarding/ # 不开启会导致 Pod 无法链接外网以及 Pod 间无法通信的问题. [root@host ~]# echo &amp;#34;net.ipv4.ip_forward = 1&amp;#34; &amp;gt;&amp;gt; /etc/sysctl.conf [root@host ~]# sysctl -p [root@host ~]# sysctl -a | grep &amp;#34;ip_forward&amp;#34; net.ipv4.ip_forward = 1 # 开启NAT [root@host ~]# iptables -P FORWARD ACCEPT # 缺省允许 IP 转发 # 利用 iptables 实现 NAT MASQUERADE 共享上网，此处 eth0 需要是能够访问外部网络的网卡接口 [root@host ~]# iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE  修改 k8s.</description>
    </item>
    
    <item>
      <title>Kubernetes入门-基础</title>
      <link>https://blog.moyrn.com/posts/20210206_before_start/</link>
      <pubDate>Sat, 06 Feb 2021 10:13:46 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210206_before_start/</guid>
      <description>网络设置
# https://ccie.lol/knowledge-base/linux-centos-route-forwarding/ # 注意事项 开启 IP 路由转发和 NAT, 未开启会导致 Pod 无法访问外网以及 Pod 间无法通信. [root@host ~]# echo &amp;#34;net.ipv4.ip_forward = 1&amp;#34; &amp;gt;&amp;gt; /etc/sysctl.conf [root@host ~]# sysctl -p [root@host ~]# sysctl -a | grep &amp;#34;ip_forward&amp;#34; net.ipv4.ip_forward = 1 # 开启NAT [root@host ~]# iptables -P FORWARD ACCEPT # 缺省允许 IP 转发 # 利用 iptables 实现 NAT MASQUERADE 共享上网，此处 eth0 需要是能够访问外部网络的网卡接口 [root@host ~]# iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE   CPU</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://blog.moyrn.com/about/</link>
      <pubDate>Fri, 29 Jan 2021 13:20:15 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/about/</guid>
      <description>联系方式  邮箱： moyrn@qq.com gitee: https://gitee.com/moyrn  </description>
    </item>
    
    <item>
      <title>字符串拼接性能测试</title>
      <link>https://blog.moyrn.com/posts/20210128_string_join_benchmark/</link>
      <pubDate>Thu, 28 Jan 2021 13:31:45 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210128_string_join_benchmark/</guid>
      <description>// splicing_test.go package splicing import ( &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;testing&amp;#34; ) func Str(str []string) string { var rst string for _, s := range str { rst += s } return rst } func BuilderStr(str []string) string { var builder strings.Builder for _, s := range str { builder.WriteString(s) } return builder.String() } func BenchmarkStr(b *testing.B) { srcStr := make([]string, 0, 100000) b.Run(&amp;#34;Append-10000&amp;#34;, func(b *testing.B) { for i := 0; i &amp;lt; 10000; i++ { srcStr = append(srcStr, strconv.</description>
    </item>
    
    <item>
      <title>time.After() 导致内存暴涨</title>
      <link>https://blog.moyrn.com/posts/20210127_time_after_oom/</link>
      <pubDate>Thu, 31 Oct 2019 13:04:41 +0800</pubDate>
      
      <guid>https://blog.moyrn.com/posts/20210127_time_after_oom/</guid>
      <description>select + time.After 导致内存暴涨 func Function(notRun notRun) { for { select { case &amp;lt;-notRun.notRun: // 大多数情况都是有notRun的输入 	case &amp;lt;-time.After(time.Minute): notRun.Close() continue case &amp;lt;-notRun.run: notRun.Close() return } } }  notRun 发送消息频率过快，而每次select都会调用到time.After，而time.After又会NewTimer，而每次NewTimer都必须在1分钟后才能释放。 当notRun的频率很高时，会在内存中堆积非常多的无用的Timer。导致内存暴涨。  解决方法 func Function(notRun notRun) { afterTime := time.Minute after := time.NewTimer(afterTime) defer after.Stop() for { after.Reset(afterTime) select { case &amp;lt;-notRun.notRun: case &amp;lt;-after.C: notRun.Close() continue case &amp;lt;-notRun.run: notRun.Close() return } } }  自己 NewTimer 在每次 select 之前 reset，使 timer 重新计时，从而避免每次都 new timer。  </description>
    </item>
    
  </channel>
</rss>
